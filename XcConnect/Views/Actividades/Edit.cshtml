@model XcConnect.Models.Actividades

@{
    ViewBag.Title = "Actividades";
}

<h2>Editar Actividad</h2>

@using (Html.BeginForm("Edit", "Actividades", FormMethod.Post, new { @class = "form-horizontal", role = "form", enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    <div class="row wrapper border-bottom white-bg page-headingl">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.ActividadID)
        @Html.HiddenFor(model => model.EmpresaID)
        @Html.HiddenFor(model => model.UserID)


        <div class="form-group">
            @Html.LabelFor(model => model.FechaRegistro, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.FechaRegistro, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.FechaRegistro, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Descripcion, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Descripcion, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Descripcion, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.TipoActividadID, "Tipo de Actividad", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("TipoActividadID", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.TipoActividadID, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.FechaEntrega, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.FechaEntrega, new { htmlAttributes = new { @class = "form-control datecontrol" } })
                @Html.ValidationMessageFor(model => model.FechaEntrega, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Notas, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Notas, new { htmlAttributes = new { @class = "form-control", rows = "4" } })
                @Html.ValidationMessageFor(model => model.Notas, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.Archivos, new { @class = "col-md-2 control-label" })
            <div class="col-md-10">
                <input type="file" name="ArchivosUploader" id="fileUpload" accept=".txt,.doc,.docx,.xls,.xlsx,.pdf,.ppt,.pptx,.msg,.jpg,.png" multiple />
                <b><small>Máximo 5MB (txt, doc, docx, xls, xlsx, ppt, pptx, pdf, msg, jpg, png)</small></b>
            </div>
        </div>

        <br />

        @if (Model.Archivos != null && Model.Archivos.Count > 0)
        {
            <div class="form-group">
                <div class="col-md-12">
                    <div class="ibox">
                        <div style="margin-top:5px;">
                            <table class="table table-striped table-bordered table-hover dataTables-example">
                                <thead>
                                    <tr>
                                        <th>Archivo</th>
                                        <th>Acciones</th>
                                    </tr>
                                </thead>
                                @foreach (var archivo in Model.Archivos)
                                {
                                    <tr id="@("del"+@archivo.ActividadArchivoID)">
                                        <td><a href="@archivo.ArchivoUrl" target="_blank">@archivo.ArchivoNombre</a></td>
                                        <td>
                                            <a class="fa fa-trash-o" onclick="deleteFile('@archivo.ActividadArchivoID');" title="Eliminar Archivo"></a>
                                        </td>
                                    </tr>
                                }
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        }

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Guardar" class="btn btn-primary btn-md" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Regresar a la lista", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}

<br />
<br />

<script type="text/javascript">
    function deleteFile(idF) {
        if (confirm('¿Realmente desea eliminar el archivo?')) {
            $.ajax({
                url: '@Url.Action("DeleteFile")',
                data: { id: idF },
                success: function (data) {
                    $("#del" + idF).fadeOut("normal", function () {
                        $(this).remove();
                    });

                },
                error: function (xhr, ajaxOptions, thrownError) {
                    alert("Error eliminando el archivo. Por favor intente de nuevo.");
                }
            });
        }
    }

    $(document).ready(function () {
        $("#fileUpload").on("change", function (e) {

            var countErrors = 0;
            var files = e.currentTarget.files;
            var realFiles = 0;
            var MaxSize = @int.Parse(ConfigurationManager.AppSettings["MaxFileSizeInMB"]);

            for (var x in files) {
                var filesize = ((files[x].size / 1024) / 1024).toFixed(4); // MB

                if (files[x].name != "item" && typeof files[x].name != "undefined") {

                    realFiles++;

                    if (filesize > MaxSize) {
                        countErrors++;
                    }
                }
            }

            if (countErrors > 0) {
                if (realFiles == 1) {
                    alert('El archivo seleccionado no es permitido porque superan el peso permitido de '+ MaxSize +'MB.');
                }
                else {
                    alert('Los archivos fueron omitidos de la selección porque algunos superan el peso permitido de '+ MaxSize +'MB.');
                }

                $("#fileUpload").val('');
            }
        });
    });
</script>

